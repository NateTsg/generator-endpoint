import async from 'async';
import express from 'express';
import passport from 'passport';

import <%= model_name %> from '../models/<%= model_name %>'

import config from '../configs/config';
import authMiddleware from '../middlewares/AuthMiddleware';


let router = express.Router();

/**
 * Retrieve All <%= plural_form %>
 */
router.get('/', 
    // passport.authenticate('jwt', {session: false}), 
    // authMiddleware.checkAccessLevel(config.roles.admin), 
    (request, response, next) => {

    <%= model_name %>.find({}, (error, categories) => {
        if (error) {
            next(error,request,response)
        }
        else {
            response.status(200).json(categories);
        }
    });
});

/**
 * Retrieve <%= model_name %> by ID
 */
router.get('/:id', 
    // passport.authenticate('jwt', {session: false}), 
    // authMiddleware.checkAccessLevel(config.roles.admin), 
    (request, response, next) => {

    <%= model_name %>.findById(request.params.id, (error, category) => {
        if (error) {
            next(error,request,response)
        }
        else {
            response.status(200).json(category);
        }
    });
});

/**
 * Create <%= model_name %>
 * @param  {
    <% JSON.parse(properties).forEach(function(user){ %>
    <%-user.property_name %>
    <% }); %>,
 }
 */
router.post('/', 
    // passport.authenticate('jwt', {session: false}), 
    // authMiddleware.checkAccessLevel(config.roles.admin), 
    (request, response,next) => {

    let new<%= model_name %> = new <%= model_name %>();
    <% JSON.parse(properties).forEach(function(user){ %>
    new<%= model_name %>.<%-user.property_name %> = request.body.<%-user.property_name %> ;
    <% }); %>  
    new<%= model_name %>.save((error, category) => {
        if (error) {
            next(error,request,response)
        }
        else {
            response.status(200).json(category);
        }
    });
});

/**
 * Update <%= model_name %>
 * @param  {
    <% JSON.parse(properties).forEach(function(user){ %>
*   <%-user.property_name %>
    <% }); %>,
 }
 */
router.put('/:id', 
    //passport.authenticate('jwt', {session: false}), 
    //authMiddleware.checkAccessLevel(config.roles.admin), 
    (request, response, next) => {

    async.waterfall([
        (done) => {
            <%= model_name %>.findById(request.params.id, (error, category) => {
                if (error) {
                    
                    done(error);
                }
                else {
                    done(null, category);
                }
            });
        },
        (<%= model_name %>, done) => {
            <% JSON.parse(properties).forEach(function(user){ %>
            <%= model_name %>.<%-user.property_name %> = request.body.<%-user.property_name %> ;
            <% }); %> 
            <%= model_name %>.save((error, updated<%= model_name %>) => {
                if (error) {
                    next(error,request,response)
                }
                else {
                    response.status(200).json(updated<%= model_name %>);
                }
            });
        }
    ], (error) => {
        next(error,request,response)
    });
});



export default router;